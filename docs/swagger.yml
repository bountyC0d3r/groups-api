openapi: "3.0.0"
info:
  title: New Groups API
  description: |
    The new Groups API

    ### Pagination
      Requests that return multiple items will be paginated to 20 items by default. You can specify
      further pages with the `page` parameter. You can also set a custom page
      size up to 100 with the `perPage` parameter.

      Pagination response data is included in http headers. By Default, the response header contains links with `next`, `last`, `first`, `prev` resource links.
  version: "v5"

paths:
  /groups/{groupId}/members:
    get:
      description: |
        Get members by group id

        If the group is private, the user needs to be a member of the group, or an admin.
      tags:
        - group membership
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        200:
          $ref: '#/components/responses/GroupMembershipArrayResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      description: |
        Add a member to the specified group

        If the group is private, the user needs to be a member of the group, or an admin or the user making the request is having the role of groupManager or groupAdmin.
      tags:
        - group membership
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        $ref: '#/components/requestBodies/NewGroupMembershipBodyParam'
      responses:
        200:
          $ref: "#/components/responses/GroupMembershipResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}/members/{memberId}:
    get:
      description: Get membership by group id and member id
      tags:
        - group membership
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberId'
      responses:
        200:
          $ref: "#/components/responses/GroupMembershipResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      description: |
        Remove a member from specified group

        The user has to have admin role or the role of groupManager or groupAdmin and the group allows self registration.
      tags:
        - group membership
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberId'
        - name: universalUID
          in: query
          required: false
          schema:
            type: string
          description: universal UID
      responses:
        200:
          $ref: "#/components/responses/GroupMembershipResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}/membersCount:
    get:
      description: Get distinct user members count by group id.
      tags:
        - group membership
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/includeSubGroups'
      responses:
        200:
          description: OK. Response will contain count of members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/memberGroups/groupMembersCount:
    get:
      description: Get groups member count
      tags:
        - group membership
      parameters:
        - $ref: '#/components/parameters/includeSubGroups'
        - name: universalUID
          in: query
          required: false
          schema:
            type: string
          description: universal UID
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
          description: organization id
      responses:
        200:
          description: OK. Response will contain count of members.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    oldId:
                      type: string
                    count:
                      type: integer
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/memberGroups/{memberId}:
    get:
      description: Get distinct group old ids of the member.
      tags:
        - group membership
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        200:
          description: OK. Response will contain unique group old ids
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}:
    get:
      description: |
        Fetch a particular group

        If the group is private, the user needs to be a member of the group, or an admin.
      tags:
        - groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/includeSubGroups'
        - $ref: '#/components/parameters/includeParentGroups'
        - $ref: '#/components/parameters/oneLevel'
        - name: fields
          in: query
          required: false
          description: |
            fields=fieldName1,fieldName2,...,fieldN  - parameter for
            choosing which fields of group that will be included in response.

            + id
            + createdAt
            + createdBy
            + updatedAt
            + updatedBy
            + name
            + description
            + domain
            + selfRegister
            + privateGroup
            + organizationId
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      description: |
        Delete a group

        The user has to have admin role.
      tags:
        - groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"

        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      description: |
        Update group

        The user has to have admin role.
      tags:
        - groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateGroupBodyParam'
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups:
    get:
      description: |
        Fetch groups by user or group.

        If the user is not admin, backend will ignore memberId and membershipType. It will fetch groups which given user is belonged to.
      tags:
        - groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: memberId
          in: query
          required: false
          schema:
            type: string
          description: id of membership
        - name: universalUID
          in: query
          required: false
          schema:
            type: string
          description: universal UID
        - name: membershipType
          in: query
          required: false
          schema:
            type: string
          description: membership type. Use 'group' if memberId is an id of a group, otherwise 'user'
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: group name
        - name: oldId
          in: query
          required: false
          schema:
            type: string
          description: old group id (legacy data)
        - name: ssoId
          in: query
          required: false
          schema:
            type: string
          description: sso id
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
          description: organization id
        - name: selfRegister
          in: query
          required: false
          schema:
            type: boolean
          description: Flag indicates if the group allows self register
        - name: privateGroup
          in: query
          required: false
          schema:
            type: boolean
          description: Flag indicates if the group is private
        - name: includeSubGroups
          in: query
          required: false
          schema:
            type: boolean
          description: Flag indicates if sub groups are included
        - name: includeParentGroup
          in: query
          required: false
          schema:
            type: boolean
          description: Flag indicates if parent groups are included
        - name: oneLevel
          in: query
          required: false
          schema:
            type: boolean
          description: Flag indicates if only one level of sub/parent groups are included
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: ['active', 'inactive']
            default: 'active'
          description: the group status
      responses:
        200:
          $ref: "#/components/responses/GroupArrayResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      description: |
        Creation of new group

        The user has to have admin role.
      tags:
        - groups
      security:
        - bearer: []
      requestBody:
        $ref: '#/components/requestBodies/NewGroupBodyParam'
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/oldId/{oldId}:
    get:
      description: |
        Fetch a particular group by old id (legacy id)

        If the group is private, the user needs to be a member of the group, or an admin.
      tags:
        - groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/oldId'
        - $ref: '#/components/parameters/includeSubGroups'
        - $ref: '#/components/parameters/includeParentGroups'
        - $ref: '#/components/parameters/oneLevel'
        - name: fields
          in: query
          required: false
          description: |
            fields=fieldName1,fieldName2,...,fieldN  - parameter for
            choosing which fields of group that will be included in response.

            + id
            + createdAt
            + createdBy
            + updatedAt
            + updatedBy
            + name
            + description
            + domain
            + selfRegister
            + privateGroup
            + organizationId
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
          
  /groups/{groupId}/subGroup:
    post:
      description: |
        Creation of a new sub group

        The user has to have admin role or have a "groupAdmin" role for that group.
      tags:
        - sub groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        $ref: '#/components/requestBodies/NewGroupBodyParam'
      responses:
        200:
          $ref: "#/components/responses/GroupResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}/subGroup/{subGroupId}:
    delete:
      description: |
        Creation of a new sub group

        The user has to have admin role or have a "groupAdmin" role for that group.
      tags:
        - sub groups
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/subGroupId'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /group-roles/users/{memberId}:
    get:
      description: |
        Returns the groups and roles of the user identified by memberId.

        The user has to have admin role.
      tags:
        - group roles
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        200:
          $ref: '#/components/responses/GroupMemberRoleResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      description: |
        Creation of new group role for a user

        The user has to have admin role.
      tags:
        - group roles
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/memberId'
      requestBody:
        $ref: '#/components/requestBodies/GroupRoleBodyParam'
      responses:
        201:
          description: CREATED
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      description: |
        Delete a group role

        The user has to have admin role.
      tags:
        - group roles
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/memberId'
      requestBody:
        $ref: '#/components/requestBodies/GroupRoleBodyParam'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /groups/health:
    get:
      description: |
        Get app health status
      tags:
        - health
      responses:
        200:
          description: success, the service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  checksRun:
                    type: integer
        503:
          $ref: "#/components/responses/ServiceUnavailableError"

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    groupId:
      name: groupId
      in: path
      description: The group id.
      required: true
      schema:
        type: string
      example: '10ba038e-48da-123b-96e8-8d3b99b6d18a'
    subGroupId:
      name: subGroupId
      in: path
      description: The sub group id.
      required: true
      schema:
        type: string
      example: '10ba038e-48da-123b-96e8-8d3b99b6d18a'
    oldId:
      name: oldId
      in: path
      description: The old group id.
      required: true
      schema:
        type: string
      example: '12345678'
    memberId:
      name: memberId
      in: path
      description: The member id.
      required: true
      schema:
        type: string
      example: '10ba038e-48da-123b-96e8-8d3b99b6d18a'
    includeSubGroups:
      name: includeSubGroups
      in: query
      required: false
      schema:
        type: boolean
      description: |
        a flag to indicate whether or not include the sub groups, default to false
        includeSubGroups and includeParentGroups could not be true at the same time
    includeParentGroups:
      name: includeParentGroup
      in: query
      required: false
      schema:
        type: boolean
      description: |
        a flag to indicate whether to include parent groups, default to false
        includeSubGroups and includeParentGroups could not be true at the same time
    oneLevel:
      name: oneLevel
      in: query
      required: false
      schema:
        type: boolean
      description: |
        when includeSubGroups is true, it's a flag to indicate whether or not get one level of sub groups or all the sub groups recursively, default to false
        when includeParentGroups is true, it's a flag to indicate whether or not get one level of parent groups or all the parent groups recursively, default to true
        includeSubGroups and includeParentGroups could not be true at the same time
    page:
      name: page
      in: query
      description: The page number. 1 based.
      required: false
      schema:
        type: integer
        default: 1
    perPage:
      name: perPage
      in: query
      description: The number of entities shown in one page.
      required: false
      schema:
        type: integer
        default: 20
        maximum: 100
  responses:
    BadRequest:
      description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing).
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The bad request error message.
                example: Invalid input.
    NotFound:
      description: NOT FOUND - if the resource in request did not exist
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The not found error message.
                example: A resource with the name could not be found.
    Unauthenticated:
      description: UNAUTHENTICATED - if user is unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The unauthorized error message.
                example: Unable to authenticate the user.
    Forbidden:
      description: FORBIDDEN - if it's forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The forbidden error message.
                example: You are not allowed to access the request.
    InternalServerError:
      description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The server error message.
                example: Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment.
    ServiceUnavailableError:
      description: service is unavailable, e.g. database is down, or database access is very slow
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The server error message.
                example: the database operation is slow

    GroupMembershipArrayResponse:
      description: The group members response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GroupMembership"
      headers:
        X-Next-Page:
          schema:
            type: integer
          description: The index of the next page
        X-Page:
          schema:
            type: integer
          description: The index of the current page (starting at 1)
        X-Per-Page:
          schema:
            type: integer
          description: The number of items to list per page
        X-Total:
          schema:
            type: integer
          description: The total number of items
        X-Total-Pages:
          schema:
            type: integer
          description: The total number of pages
        Link:
          schema:
            type: string
          description: Pagination link header

    GroupMembershipResponse:
      description: The group member response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMembership'
    GroupArrayResponse:
      description: The group response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
      headers:
        X-Next-Page:
          schema:
            type: integer
          description: The index of the next page
        X-Page:
          schema:
            type: integer
          description: The index of the current page (starting at 1)
        X-Per-Page:
          schema:
            type: integer
          description: The number of items to list per page
        X-Total:
          schema:
            type: integer
          description: The total number of items
        X-Total-Pages:
          schema:
            type: integer
          description: The total number of pages
        Link:
          schema:
            type: string
          description: Pagination link header

    GroupResponse:
      description: The group response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    GroupMemberRoleResponse:
      description: The group role response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GroupRole'
      headers:
        X-Next-Page:
          schema:
            type: integer
          description: The index of the next page
        X-Page:
          schema:
            type: integer
          description: The index of the current page (starting at 1)
        X-Per-Page:
          schema:
            type: integer
          description: The number of items to list per page
        X-Total:
          schema:
            type: integer
          description: The total number of items
        X-Total-Pages:
          schema:
            type: integer
          description: The total number of pages
        Link:
          schema:
            type: string
          description: Pagination link header

  schemas:
    GroupMembership:
      description: The group membership entity
      properties:
        id:
          type: string
          description: The group membership id
        groupId:
          type: string
          description: The group id
        groupName:
          type: string
          description: The group name
        createdAt:
          type: string
          format: date-time
          description: The time the group membership created at
        createdBy:
          type: string
          description: The id of the user who created the group membership
        memberId:
          type: string
          description: The member id
        membershipType:
          type: string
          enum: ['user', 'group']
          description: The membership type

    Group:
      description: The group entity
      properties:
        id:
          type: string
          description: The group id
        createdAt:
          type: string
          format: date-time
          description: The time the group created at
        createdBy:
          type: string
          description: The id of the user who created the group
        updatedAt:
          type: string
          format: date-time
          description: The time the group updated at
        updatedBy:
          type: string
          description: The id of the user who updated the group
        name:
          type: string
          description: The group name
        description:
          type: string
          description: The group description
        privateGroup:
          type: boolean
          description: Flag indicates if the group is private
        selfRegister:
          type: boolean
          description: Flag indicates if the group allows self register
        ssoId:
          type: string
          description: the SSO id
        organizationId:
          type: string
          description: the organization id
        oldId:
          type: string
          description: the old id
        domain:
          type: string
          description: Domain to indicate what tc web site that the group belongs to
        subGroups:
          description: Sub groups array
          type: array
          items:
              $ref: '#/components/schemas/Group'
        parentGroups:
          description: Parent groups array
          type: array
          items:
              $ref: '#/components/schemas/Group'
              
    GroupRole:
      description: The group role entity
      properties:
        groupId:
          type: string
          description: The group id
        role:
          type: string
          enum: ['groupManager', 'groupAdmin']
          description: The group role
        createdAt:
          type: string
          format: date-time
          description: The time the group role created at
        createdBy:
          type: string
          description: The id of the user who created the group role

  requestBodies:
    NewGroupMembershipBodyParam:
      description: A JSON object containing group membership body information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                description: The id of the user which is being added to the group
              universalUID:
                type: string
                description: The universal UID
              membershipType:
                type: string
                enum: ['user', 'group']
                description: The membership type
    NewGroupBodyParam:
      description: A JSON object containing group body information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The group name
              description:
                type: string
                description: The group description
              privateGroup:
                type: boolean
                description: Flag indicte if the group is private or not
              selfRegister:
                type: boolean
                description: Flag indicte if the group allows self register
              domain:
                type: string
                description: Domain to indicate what tc web site that the group belongs to
              ssoId:
                type: string
                description: the SSO id
              organizationId:
                type: string
                description: the organization id
              status:
                type: string
                enum: ['active', 'inactive']
                default: 'active'
                description: Value indicating the status of the group
    UpdateGroupBodyParam:
      description: A JSON object containing group body information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The group name
              description:
                type: string
                description: The group description
              privateGroup:
                type: boolean
                description: Flag indicte if the group is private or not
              selfRegister:
                type: boolean
                description: Flag indicte if the group allows self register
              domain:
                type: string
                description: Domain to indicate what tc web site that the group belongs to
              ssoId:
                type: string
                description: the SSO id
              oldId:
                type: string
                description: the old id
              organizationId:
                type: string
                description: the organization id
              status:
                type: string
                enum: ['active', 'inactive']
                description: Value indicating the status of the group
    GroupRoleBodyParam:
      description: A JSON object containing group role body information
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - groupId
              - role
            properties:
              groupId:
                type: string
                description: The group id
                example: '10ba038e-48da-123b-96e8-8d3b99b6d18a'
              role:
                type: string
                enum: ['groupManager', 'groupAdmin']
                description: The group role
